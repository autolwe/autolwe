bilinear_map e : G * G -> G_t.

adversary A : () -> (G * G).

bound_succ
[ (* setup *)
  g1, g2, g3 <-$ G;

  a1, a2, a3 <-$ Fq;

  b01, b02, b03 <-$ Fq;
  b11, b12, b13 <-$ Fq;
  b21, b22, b23 <-$ Fq;
  b31, b32, b33 <-$ Fq;
  b41, b42, b43 <-$ Fq;
  b51, b52, b53 <-$ Fq;

  let h1 = g1^a1*g3^a3;
  let h2 = g2^a2*g3^a3;

  let f01 = g1^b01*g3^b03; let f02 = g2^b02*g3^b03;
  let f11 = g1^b11*g3^b13; let f12 = g2^b12*g3^b13;
  let f21 = g1^b21*g3^b23; let f22 = g2^b22*g3^b23;
  let f31 = g1^b31*g3^b33; let f32 = g2^b32*g3^b33;
  let f41 = g1^b41*g3^b43; let f42 = g2^b42*g3^b43;
  let f51 = g1^b51*g3^b53; let f52 = g2^b52*g3^b53;

  (m,L) <- A();  
  (* encryption of m with label L *)
  r <-$ Fq;
  s <-$ Fq;
  let u1 = g1^r;
  let u2 = g2^s;
  let u3 = g3^(r + s);
  let c = m*h1^r*h2^s;
  let v = e(f01^r*f02^s,g) *
          e(f11^r*f12^s,u1) *
          e(f21^r*f22^s,u2) *
          e(f31^r*f32^s,u3) *
          e(f41^r*f42^s,c) * e(f51^r*f52^s,L);


  let v' = e(u1^b01*u2^b02*u3^b03,g) *
           e(u1^b11*u2^b12*u3^b13,u1) *
           e(u1^b21*u2^b22*u3^b23,u2) *
           e(u1^b31*u2^b32*u3^b33,u3) *
           e(u1^b41*u2^b42*u3^b43,c) * e(u1^b51*u2^b52*u3^b53,L);
] : not ((v = v') /\ (m = c / (u1^a1*u2^a2*u3^a3))).
unfold. norm.
false_ev.
qed.
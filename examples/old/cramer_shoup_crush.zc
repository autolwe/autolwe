assumption_decisional ddh
  [ x <-$ Fq; y <-$ Fq;
    let gx = g ^ x; let gy = g ^ y; let gxy = g ^ (x * y); ]
  [ x <-$ Fq; y <-$ Fq; z <-$ Fq;
    let gx = g ^ x; let gy = g ^ y; let gxy = g ^ z; ]
    (x y z) ([x,y]).

operator H : (G * G * G) -> Fq.

assumption_computational tcr
  [ a <-$ Fq; b <-$ Fq; c <-$ Fq;
    let ga = g ^ a; let gb = g ^ b; let gc = g ^ c; ]
  (x : (G * G * G) -> (H(ga,gb,gc) = H(x)) /\ not (x = (ga,gb,gc)) )
  (a b c).

adversary A1 : (G * G * G * G) -> (G * G).
adversary A2 : (G * G * G * G) -> Bool.
oracle Dec1 : (G * G * G * G) -> G.
oracle Dec2 : (G * G * G * G) -> G.

prove
  [ w  <-$ Fq;
    x1 <-$ Fq;
    x2 <-$ Fq;
    y1 <-$ Fq;
    y2 <-$ Fq;
    z1 <-$ Fq;
    z2 <-$ Fq;
    (* secret key is x1,x2,y1,y2,z1,z2 *)
    let p1 = g^(x1+w*x2);
    let p2 = g^(y1+w*y2);
    let p3 = g^(z1+w*z2);
    let p4 = g^w;
    
    (m0,m1) <- A1(p1,p2,p3,p4) with
      Dec1(a,a',c,d) =
        [ c * (a^z1 * a' ^z2)^(-1)
        | d = a^(x1+H(a,a',c)*y1) * a'^(x2+H(a,a',c)*y2) ];

    b <-$ Bool;
    let mb = (b?m0:m1);
    (* randomness for encryption is u *)
    u <-$ Fq;
    (* we break the connection between sa' and the rest using DDH *)
    (* sc and sa are required for decryption *)
    let sa  = g^u;
    let sa' = p4^u;
    let sc  = mb * p3^u;
    let sd  = p1^u * p2^(u*H(sa,sa',sc));

    b' <- A2(sa,sa',sc,sd) with
      Dec2(a,a',c,d) =
        [ c * (a^z1 * a'^z2)^(-1)
        | not ((a,a',c,d) = (sa,sa',sc,sd)),
          d = a^(x1+H(a,a',c)*y1) * a'^(x2+H(a,a',c)*y2) ];

  ] : b = b'.
  
  bycrush 12.
  qed.
  print_proof.
  extract "extraction/cramer_shoup_crush.ec".